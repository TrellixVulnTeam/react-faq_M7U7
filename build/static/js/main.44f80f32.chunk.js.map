{"version":3,"sources":["Keepnote.js","Test7.js","App.js","reportWebVitals.js","index.js"],"names":["Keepnote","question","ans","Fragment","List","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Typography","component","variant","color","Divider","Test7","useState","open","setOpen","setData","setFullData","data","fullData","setVal","e","target","name","value","preval","handleClose","event","reason","console","log","noValidate","autoComplete","className","TextField","id","label","onChange","Button","onClick","Object","values","some","x","alert","pre","map","index","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","size","IconButton","fontSize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQA8CeA,EAlCA,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,SAASC,EAAO,EAAPA,IAGtB,OACI,cAAC,IAAMC,SAAP,UAEJ,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAUC,WAAW,aAArB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,IAAI,aAAaC,IAAI,kIAE/B,cAACC,EAAA,EAAD,CACEC,QAAO,UAAKX,EAAL,KACPY,UACE,eAAC,IAAMV,SAAP,WACE,cAACW,EAAA,EAAD,CACEC,UAAU,OACVC,QAAQ,QACRC,MAAM,cAHR,kBADF,kBAQSf,WAKf,cAACgB,EAAA,EAAD,CAASF,QAAQ,QAAQD,UAAU,a,8DCwF1BI,EAlHH,WACR,MAAsBC,oBAAS,GAA/B,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAyBJ,mBAAS,CAC9BnB,SAAS,GACTC,IAAI,KAFR,mBAAOuB,EAAP,KAAaC,EAAb,KAKMC,EAAO,SAACC,GACV,MAAoBA,EAAEC,OAAfC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACbL,GAAS,SAACM,GACN,kCACOA,GADP,kBAEKF,EAAMC,QA2BbE,EAAY,SAACC,EAAMC,GACrBC,QAAQC,IAAIF,GACA,cAATA,GAGHb,GAAQ,IAGZ,OACE,eAAC,IAAMnB,SAAP,WACE,uBAAMmC,YAAU,EAACC,aAAa,MAAMC,UAAU,0BAA9C,UACE,cAACC,EAAA,EAAD,CACED,UAAU,MACVE,GAAG,iBACHC,MAAM,WACNZ,MAAON,EAAKxB,SACZ6B,KAAK,WACLc,SAAUjB,IAEZ,cAACc,EAAA,EAAD,CACED,UAAU,MACVE,GAAG,iBACHC,MAAM,MACNZ,MAAON,EAAKvB,IACZ4B,KAAK,MACLc,SAAUjB,IAEZ,cAACkB,EAAA,EAAD,CACEL,UAAU,MACVxB,QAAQ,YACRC,MAAM,UACN6B,QApDK,WACT,GAAIC,OAAOC,OAAOvB,GAAMwB,MAAK,SAAAC,GAAC,OAAS,OAALA,GAAkB,KAALA,KAe3C,OAHAC,MAAM,wBACN7B,GAAQ,IAED,EAdPE,GAAY,SAAC4B,GACT,MAAM,GAAN,mBAAWA,GAAX,CAAe3B,OAGnBC,EAAS,CACLzB,SAAS,GACTC,IAAI,KAERoB,GAAQ,IAsCV,6BAUDC,EAAQ8B,KAAI,SAACtB,EAAOuB,GACnB,IAAQrD,EAAkB8B,EAAlB9B,SAAUC,EAAQ6B,EAAR7B,IAClB,OACE,cAAC,EAAD,CAAsBwC,GAAIY,EAAOrD,SAAUA,EAAUC,IAAKA,GAA3CoD,MAKnB,cAACC,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdrC,KAAMA,EACNsC,iBAAkB,IAClBC,QAAS3B,EACT4B,QAAQ,yBACRC,OACE,eAAC,IAAM3D,SAAP,WACE,cAAC0C,EAAA,EAAD,CAAQ5B,MAAM,YAAY8C,KAAK,QAAQjB,QAASb,EAAhD,kBAGA,cAAC+B,EAAA,EAAD,CACED,KAAK,QACL,aAAW,QACX9C,MAAM,UACN6B,QAASb,EAJX,SAME,cAAC,IAAD,CAAWgC,SAAS,qBCxGrBC,MAXf,WACE,OACE,cAAC,IAAM/D,SAAP,UACE,qBAAKqC,UAAU,YAAf,SACE,cAAC,EAAD,SCKO2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.44f80f32.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Keepnote=({question,ans})=>{\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n\r\n    <List>\r\n      <ListItem alignItems=\"flex-start\">\r\n        <ListItemAvatar>\r\n          <Avatar alt=\"Remy Sharp\" src=\"https://secureservercdn.net/160.153.138.219/7xh.780.myftpupload.com/wp-content/uploads/2020/12/69381782.jpg?time=1626311519\" />\r\n        </ListItemAvatar>\r\n        <ListItemText\r\n          primary={`${question}?`}\r\n          secondary={\r\n            <React.Fragment>\r\n              <Typography\r\n                component=\"span\"\r\n                variant=\"body2\"\r\n                color=\"textPrimary\"\r\n              >\r\n                Ans:\r\n              </Typography>\r\n              {` â€” ${ans}`}\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </ListItem>\r\n      <Divider variant=\"inset\" component=\"li\" />\r\n    </List>\r\n          \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Keepnote;","import React, { useState } from 'react';\r\nimport Keepnote from './Keepnote';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n\r\n\r\n\r\n\r\nconst Test7=()=>{\r\n    const [open, setOpen]=useState(false);\r\n    const [setData, setFullData] = useState([]);\r\n    const [data, fullData] = useState({\r\n        question:'',\r\n        ans:''\r\n    })\r\n\r\n    const setVal=(e)=>{\r\n        const {name, value}=e.target;\r\n        fullData((preval)=>{\r\n            return{\r\n                ...preval,\r\n                [name]:value\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    const getVal=()=>{\r\n        if(!Object.values(data).some(x => x ===null || x ==='')){\r\n            setFullData((pre)=>{\r\n                return [...pre,data];\r\n            })\r\n    \r\n            fullData({\r\n                question:'',\r\n                ans:''\r\n            });\r\n            setOpen(true);\r\n        }\r\n        else{\r\n            alert('please add the value');\r\n            setOpen(false);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    const handleClose=(event,reason)=>{\r\n        console.log(reason);\r\n        if(reason==='clickaway'){\r\n            return; \r\n        }\r\n        setOpen(false);\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <form noValidate autoComplete=\"off\" className=\"d-flex p-2 bd-highlight\">\r\n          <TextField\r\n            className=\"m-3\"\r\n            id=\"standard-basic\"\r\n            label=\"Question\"\r\n            value={data.question}\r\n            name=\"question\"\r\n            onChange={setVal}\r\n          />\r\n          <TextField\r\n            className=\"m-3\"\r\n            id=\"standard-basic\"\r\n            label=\"Ans\"\r\n            value={data.ans}\r\n            name=\"ans\"\r\n            onChange={setVal}\r\n          />\r\n          <Button\r\n            className=\"m-3\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={getVal}\r\n          >\r\n            Ask question\r\n          </Button>\r\n        </form>\r\n\r\n        {setData.map((value, index) => {\r\n          const { question, ans } = value;\r\n          return (\r\n            <Keepnote key={index} id={index} question={question} ans={ans} />\r\n          );\r\n        })}\r\n\r\n\r\n        <Snackbar\r\n          anchorOrigin={{\r\n            vertical: \"bottom\",\r\n            horizontal: \"center\",\r\n          }}\r\n          open={open}\r\n          autoHideDuration={2000}\r\n          onClose={handleClose}\r\n          message=\"faq added successfully\"\r\n          action={\r\n            <React.Fragment>\r\n              <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\r\n                UNDO\r\n              </Button>\r\n              <IconButton\r\n                size=\"small\"\r\n                aria-label=\"close\"\r\n                color=\"inherit\"\r\n                onClick={handleClose}\r\n              >\r\n                <CloseIcon fontSize=\"small\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Test7;","import React from 'react';\r\nimport Test7 from './Test7';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container\">\r\n        <Test7/>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}